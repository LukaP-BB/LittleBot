import discord                          #on fait un bot pour discord, c'est de premi√®re n√©cessit√©
import random                           #importe la bilbioth√®que n√©cessaire pour cr√©er de l'al√©atoire
import math                             #importe le module math pour la valeur aboslue
import re                               #importe les expressions r√©guli√®res

from discord.ext import commands


bot = commands.Bot(command_prefix = '$', )



@bot.command(help="Cette comande r√©p√®te le premier mot de ta phrase : ce bot est encore un enfant, OK ? ")      #tout est dans $help
async def repeat(ctx, arg):         #ctx = le contexte de la commande, arg = le truc √† r√©p√©ter
    await ctx.send(arg)

@bot.event                      #quand le bot se connecte, "bonjour" s'affiche dans la console
async def on_ready():
    print('bonjour')



@bot.command(help="Un petit jeu pour tuer le temps : il faut taper $score suivi d'un guess entre 0 et 100. Le bot trouve un nombre myst√®re al√©atoire et fait la diff√©rence avec ton guess. Plus celle-ci est petite, plus tu es lucky")                           #commande $score : permet de faire un guess et d'obtenir la diff√©rence avec ce guess
async def score(ctx, guess):

    random.seed()                           #initialise la seed et
    score = random.randint(0,100)           #renvoie un nb pseudo al√©atoire dans l'intervalle [0;100]

    guess = int(guess)
    delta = abs(score-guess)  # 2 lignes pour calculer la diff√©rence absolue entre le guess et le score obtenu (abs vient de la biblioth√®que math)

    await ctx.send('nombre myst√®re : {}'.format(score)) #renvoie le r√©sultat en msg discord
    await ctx.send('diff√©rence : {}'.format(delta))     #renvoie la diff√©rence

    from datetime import date
    today = date. today()       #2 lignes pour √©crire la date d'obtention du score

    resultats = open("resultats.txt","a")   #ouvre le fichier resultats.txt en mode "append" : chaque √©criture se fait √† la suite de ce qui est d√©j√† √©crit
    resultats.writelines([str(ctx.message.author), " : " ,str(delta), " : ", str(today),"\n"]) #ecrit le nom d'utilisateur, le score et la date dans chaque nouvelle ligne du .txt
    resultats.close()   # a priori utile de fermer le fichier une fois √©crit pour pouvoir l'ouvrir dans une autre commande

@score.error
async def score_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("Il faut mettre un nombre apr√®s $score")
    elif(error, commands.CommandInvokeError):
        await ctx.send("$score n'accepte pas les chaines de caract√®res :rage:")
    else:
        await ctx.send("erreur")

@bot.command(help="Cette commande renvoie le nom d'utilisateur ayant eu le meilleur delta par rapport √† son guess. \nLes r√©sultats sont rentr√©s dans un fichier quand $score est appel√©, et cette commande lit le fichier qui en r√©sulte.")                  #commande pour extraire celui ayant le meilleur guess, accompagn√© de la date
async def best(ctx):
    resultats = open("resultats.txt", "r")
    min = 101
    for i, line in enumerate(resultats):
        match = re.search('(: )(\d?\d)( :)', line) #chaque expression entre parenth√®se correspond √† un groupe
        if match:
            score_obtenu = match.group(2)          #le group(2) fait r√©f√©rence aux deuxi√®mes parenth√®ses du match
            score_obtenu = int(score_obtenu)
            if (score_obtenu < min):
                min = score_obtenu
                match = re.search('[^0-9^#]*', line)
                if match:
                    nom = match.group(0)
                match = re.search('\d{4}-\d{2}-\d{2}', line)
                if match:
                    date = match.group(0)
        else:
            print("il n'y a pas encore de r√©sultat")
    await ctx.send("{} a obtenu le meilleur delta, √† savoir {} le {}".format(nom, min, date))

@bot.command(help="Quelques phrases typiques üòâ")
async def serrano(ctx):
    random.seed()                           #initialise la seed
    lol = ["Consid√©rez les pr√©fixes comme √©tant corrects",
            "N'oubliez pas, les distanciels c'est 80% du temps de travail !",
            "Merci √† Emmanuel Desmontils :heartpulse: :heart_eyes:",
            "On range son portable !",
            "FAITES PASSER LE PAQUET !!! :rage:",
            "Ne soyez pas non plus de mauvaise foi !",
            "UN PAQUET C'EST UNE COPIE",
            "Ne prenez pas mon stylo sinon on va tous √™tre malade :nauseated_face: ",
            "Faut √™tre plus pr√©cis",
            "Vous devez compl√©ter le tableau !"
            ]
    await ctx.send(lol[random.randint(0,(len(lol)-1))])


@bot.command(help="Quelques phrases typiques üòâ")
async def mekaouche(ctx):
    random.seed()
    lol = ["Tu vas pas me salir, je vais pas te salir",
            "Et si on commen√ßait par 30 minutes pour d√©couvrir un nouveau language : Bash. Quoi ? vous avez eu des cours ?",
            "MAIS REGARDE DANS TON COURS !!",
            "Regarde dans ton cours..."]
    await ctx.send(lol[random.randint(0,(len(lol)-1))])



@bot.command()
async def teletchea(ctx):
    cartouches = open("cartouches.txt","r")
    qte=cartouches.read()
    await ctx.send('{} articles se sont pris une cartouche :gun:'.format(qte))
    qte=int(qte)
    qte=qte+1
    cartouches.close
    cartouches = open("cartouches.txt","w")
    qte=str(qte)
    cartouches.write(qte)
    cartouches.close


@bot.command(help="efface le nombre de messages indiqu√©", hidden=True)
@commands.has_permissions(manage_messages=True)
async def clear(ctx, nb_messages : int):
    await ctx.channel.purge(limit=nb_messages)


@clear.error
async def clear_error():
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("tu n'as pas les droits, loser !")
    elif (isinstance(error, commands.MissingRequiredArgument)):
        await ctx.send("Il faut mettre un nombre apr√®s $score")




#cr√©ation de salons priv√©s
@bot.command(help="Ecrire la commande suivie du nom du salon.\nPour ecrire plusieurs mots, ecrire la phrase entre guillemets")
@commands.has_permissions(administrator=True)
async def salon(ctx, arg):   #nom de la commande
#cr√©ation du r√¥le
    guild = ctx.guild
    role = await guild.create_role(name=arg)

#cr√©ation du salon
    cat=ctx.channel.category #permet de connaitre la cat√©gorie du salon textuel, sinon le salon est cr√©√© tout en haut dans le serveur
    roles = {
    guild.default_role: discord.PermissionOverwrite(read_messages=False),
    role: discord.PermissionOverwrite(read_messages=True)
}
    await guild.create_text_channel(name=arg, overwrites=roles, category=cat)   #puis cr√©ation du salon avec le m√™me nom
@salon.error
async def clear_error():
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("tu n'as pas les droits, loser !")


#suppression des r√¥les et salons
@bot.command(help="Supprime un salon et un r√¥le\nDonner le nom du salon et du r√¥le en arguments de la commande\nPour les noms compos√©s de plusieurs mots, utiliser les guillemets")
@commands.has_permissions(administrator=True)
async def dels(ctx, ch : discord.TextChannel, rl : discord.Role):
    await rl.delete()
    await ch.delete()
@dels.error
async def clear_error():
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("tu n'as pas les droits, loser !")


@bot.command()
async def aide(ctx):
    embed = discord.Embed(title="Aide", description="Comment utiliser les diff√©rentes commandes ?\nLa commande $help joue un r√¥le similaire, en moins bien\nUtiliser $help <commande> te permettra (ou pas) d'obtenir des informations plus d√©taill√©s sur la commande")
    embed.add_field(name="$score", value="Mini jeu : le but est de d'entrer un nombre entre 0 et 100 apr√®s la commande. Le bot te dira quel nombre il avait tir√© et la diff√©rence entre avec ton tirage")
    embed.add_field(name="$best", value="Renvoie le nom de celui ayant la plus petite diff√©rence. Je reset la commande quand quelqu'un a un 0")
    embed.add_field(name="$serrano, $teletchea, $mekaouche", value="Juste pour rire :)")
    embed.add_field(name="$repeat", value="R√©p√®te ce qui est donn√© en argument, rien de tr√®s int√©ressant")
    embed.add_field(name="$salon", value="Cr√©e un salon et un r√¥le dont le nom est donn√© en argument, r√©serv√© aux admins")
    embed.add_field(name="$dels", value="Efface un salon et un r√¥le. Il faut mettre le nom du salon en premier argument et le nom du r√¥le en deuxi√®me argument, r√©serv√© aux admins")
    await ctx.send(embed=embed)


@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        await ctx.send("Cette commande n'existe pas")
    else:
        print(error)


@bot.command()
async def pins(ctx):
    pins = await ctx.channel.pins()
    await ctx.send(pins[-1])

token=open('token.txt', 'r')
t=token.read()
bot.run(t)
